; -*- mode: Lisp; lexical-binding: t;-*-

;; custom.el file
(setq custom-file (locate-user-emacs-file "custom.el"))

;; Always load newest byte code
(setq load-prefer-newer t)

;; reduce the frequency of garbage collection by making it happen on
;; each 50MB of allocated data (the default is on every 0.76MB)
(setq gc-cons-threshold 50000000)

;; warn when opening files bigger than 100MB
(setq large-file-warning-threshold 100000000)

(setq inhibit-startup-message t)

(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)        ; Give some breathing room
(menu-bar-mode -1)          ; Disable the menu bar
(blink-cursor-mode -1)      ; Disable cursor blinking

;; Enable line number
(column-number-mode)
(global-display-line-numbers-mode t)
;; Disable line number for some modes
(dolist (mode '(org-mode-hook
		term-mode-hook
		eshell-mode-hook))
  (add-hook mode (lambda () (display-line-number-mode 0))))

;; Newline at end of file
(setq require-final-newline t)

;; wsl delay exit mechanism
(setq map (make-sparse-keymap))
(defun delay-exit ()
  (interactive)
  (save-some-buffers)
  (sit-for 0.6)
  (kill-emacs))
(global-set-key (kbd "C-x C-c") 'delay-exit)

;; Set up the visible bell
(setq visible-bell t)
{{ if (or (eq .chezmoi.hostname "ds-pc") (eq .chezmoi.hostname "ds-laptop")) }}
(set-face-attribute 'default nil :font "Iosevka" :height 120)
{{ else }}
(set-face-attribute 'default nil :font "Iosevka" :height 130)
{{ end }}

;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

;; Initialize package sources
(require 'package)

;; Install into sepearte package dirs for each Emacs verson to preven 
;; bytecode incompatibility
(setq package-user-dir
    (expand-file-name (format "elpa-%s.%s" emacs-major-version emacs-minor-version)
                      user-emacs-directory))

;; standard package repositories
(add-to-list 'package-archives '( "melpa" . "https://melpa.org/packages/"))

(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t) ;; global ensure for use-package

(use-package command-log-mode)

(use-package ivy
  :defer 0.1
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package counsel
    :after ivy
    :bind (("M-x" . counsel-M-x)
	   ("C-x b" . counsel-ibuffer)
	   ("C-x C-f" . counsel-find-file)
	   :map minibuffer-local-map
	   ("C-r" . 'counsel-minibuffer-history)))

(use-package swiper
  :after ivy)

(use-package ivy-rich
    :after ivy
    :init (ivy-rich-mode 1))

;; chezmoi dotfiles have all-the-icons fonts by defaults but if its missing
;; then can be installed via
;; M-x all-the-icons-install-fonts
(use-package all-the-icons)

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))

(use-package doom-themes
    :config
    (load-theme 'doom-one t))

(use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

(use-package which-key
    :init(which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idel-delay 0.3))

(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Genral, Evil and Evil-colletion
;; Do I need this?
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(use-package general
  :config
  (general-create-definer rune/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC"))

(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

(use-package hydra)
(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))

(use-package projectile
    :after ivy
    :diminish projectile-mode
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (projectile-mode +1))

(use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

(use-package magit)

;; Variables configured via the interactive 'customize' interface
(when (file-exists-p custom-file)
  (load custom-file))
