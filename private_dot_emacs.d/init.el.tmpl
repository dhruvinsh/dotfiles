;;; init.el -- Init File -*- mode: emacs-lisp; lexical-binding: t;-*-

;; custom.el file
(setq custom-file (locate-user-emacs-file "custom.el"))
(add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))

;; Enable line number
(column-number-mode)
(global-display-line-numbers-mode t)
;; Disable line number for some modes
(dolist (mode '(org-mode-hook
		term-mode-hook
		eshell-mode-hook))
  (add-hook mode (lambda () (display-line-number-mode 0))))

;; Newline at end of file
(setq require-final-newline t)

;; wsl delay exit mechanism
(setq map (make-sparse-keymap))
(defun delay-exit ()
  (interactive)
  (save-some-buffers)
  (sit-for 0.6)
  (kill-emacs))
(global-set-key (kbd "C-x C-c") 'delay-exit)

;; Set up the visible bell
(setq visible-bell t)
{{ if (or (eq .chezmoi.hostname "ds-pc") (eq .chezmoi.hostname "ds-laptop")) -}}
(set-face-attribute 'default nil :font "Iosevka" :height 120)
{{ else -}}
(set-face-attribute 'default nil :font "Iosevka" :height 130)
{{ end -}}
(set-face-attribute 'fixed-pitch nil :font "Iosevka")
(set-face-attribute 'variable-pitch nil :font "Hack")

;; Initialize package sources
(require 'package)

;; Install into sepearte package dirs for each Emacs verson to preven 
;; bytecode incompatibility
(setq package-user-dir
    (expand-file-name (format "elpa-%s.%s" emacs-major-version emacs-minor-version)
                      user-emacs-directory))

;; standard package repositories
(add-to-list 'package-archives '( "melpa" . "https://melpa.org/packages/"))

(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t) ;; global ensure for use-package

(use-package command-log-mode)

(use-package ivy
  :defer 0.1
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package counsel
    :after ivy
    :bind (("M-x" . counsel-M-x)
	   ("C-x b" . counsel-ibuffer)
	   ("C-x C-f" . counsel-find-file)
	   :map minibuffer-local-map
	   ("C-r" . 'counsel-minibuffer-history)))

(use-package swiper
  :after ivy)

(use-package ivy-rich
    :after ivy
    :init (ivy-rich-mode 1))

(use-package ivy-prescient
    :after ivy
    :init (ivy-prescient-mode 1))

;; chezmoi dotfiles have all-the-icons fonts by defaults but if its missing
;; then can be installed via
;; M-x all-the-icons-install-fonts
(use-package all-the-icons)

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))

(use-package doom-themes
    :config
    (load-theme 'doom-one t))

(use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

(use-package which-key
    :init(which-key-mode)
    :diminish which-key-mode
    :init
    (setq which-key-idel-delay 0.3
	  which-key-special-keys '("SPC")
	  which-key-ellipsis ".."
          which-key-max-description-length 25
          which-key-add-column-padding 1
          which-key-prefix-prefix "+" ))

(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Genral, Evil and Evil-colletion
;; Do I need this?
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(use-package general
  :config
  (general-create-definer rune/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC"))

(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

(use-package hydra)
(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))

;; Project management
(use-package projectile
    :after ivy
    :diminish projectile-mode
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (projectile-mode +1))

(use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

(use-package treemacs-projectile
    :after projectile
    :bind (:map projectile-command-map
		("h" . treemacs-projectile)))

;; Git managment
(use-package magit
    :commands (magit))

(use-package treemacs-magit
    :after (treemacs magit))

;; Org mode with some basic goodies
(defun ds/org-mode-setup ()
  (org-indent-mode)
  (org-hide-emphasis-markers t)
  (org-catch-invisible-edits 'show)
  (org-export-coding-system 'utf-8)
  (auto-fill-mode 0)
  (visual-line-mode 1))

(use-package org
    :hook (org-mode . ds/org-mode-setup)
    :config
    (setq org-ellipsis " â–¾"))

(use-package org-modern
    :defer t
    :hook (org-mode . org-modern-mode))

;; LSP goodies
;; NOTE: few things to note for below variable:
;; https://github.com/hlissner/doom-emacs/pull/2590
;; https://github.com/hlissner/doom-emacs/issues/2589
(setq read-process-output-max (* 1024 1024))

;; I had two option of LSP, lsp-mode or eglot. Lets try Eglot (hard way I guess)
(use-package eglot
    :defer t
    :after envrc
    :bind (:map eglot-mode-map
		("C-c l a" . eglot-code-actions)
		("C-c l r" . eglot-rename)
		("C-c l f" . eglot-format)
		("C-c l d" . eldoc))
    :config
    ;; I hate the minibuffer keep moving when eglot and eldoc team ups
    ;; they keep moving the text that I write
    (setq eldoc-echo-area-use-multiline-p nil)
    :hook (python-mode . eglot-ensure))

(use-package consult-eglot
    :after eglot)

(use-package flymake-flycheck
    :after flymake
    :init
    (setq-local lfymake-diagnostic-functions
		(append flymake-diagnostic-functions
			(flymake-flycheck-all-chained-diagnostic-functions)))
    :hook ((prog-mode . flymake-mode)
	   (text-mode . flymake-mode))
    :bind (("C-c ! n" . flymake-goto-next-error)
	   ("C-c ! p" . flymake-goto-prev-error)
	   ("C-c ! c" . flymake-start)))

(use-package company
    :defer t
    :bind (("M-/" . company-complete)
	   ("C-M-i" . company-complete)
	   :map company-mode-map
	   ("M-/" . company-complete)
	   ("C-M-i" . company-complete)
	   ([remap completion-at-point] . company-complete)
	   ([remap indent-for-tab-command] . company-indent-or-complete-common)
           :map company-active-map
	   ("<tab>" . company-complete-selection)
	   ;; ("M-/" . company-other-backend)
	   ("C-n" . company-select-next)
	   ("C-p" . company-select-previous)
           ("C-d" . company-show-doc-buffer)
           ("M-." . company-show-location)
           :map company-search-map
           ("C-p" . company-select-previous)
           ("C-n" . company-select-next))
    :hook (after-init . global-company-mode)
    :init
    (setq company-minimum-prefix-length 1
	  company-tooltip-limit 12
	  company-ideal-delay 0))

(use-package company-prescient
    :after company
    :init (company-prescient-mode 1))

(use-package company-box
    :if window-system
    :diminish
    :hook (company-mode . company-box-mode))

(use-package company-quickhelp
    :after company
    :bind (:map company-active-map
		("C-c h" . company-quickhelp-manual-begin))
    :init (company-quickhelp-mode 1))

;; treemacs added
(use-package treemacs
    :defer t
    :commands (treemacs)
    :config
  (setq treemacs-sorting 'alphabetic-asc
	treemacs-follow-after-init t
	treemacs-width 30
	treemacs-read-string-input 'from-minibuffer)
  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t))

(use-package treemacs-evil
    :after (evil treemacs))

(use-package treemacs-all-the-icons
    :after treemacs)

;; env management
(use-package envrc
    :when (executable-find "direnv")
    :hook (after-init . envrc-global-mode)
    :bind-keymap
    ("C-c e" . envrc-command-map))

;; crontab editing
(use-package crontab-mode
    :mode "\\.?cron\\(tab\\)?\\'"
    :interpreter "crontab-mode")

;; code folding
(use-package origami
    :after evil
    :hook (after-init . global-origami-mode))

;; some awesome search
(use-package rg
    :defer t
    :bind ([remap xref-find-references] . rg-project))

;; Variables configured via the interactive 'customize' interface
(when (file-exists-p custom-file)
  (load custom-file))
